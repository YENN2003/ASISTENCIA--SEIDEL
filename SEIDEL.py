# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uibJkuEOe-3L2P0MCm1pCpl45sJEQW4X
"""

import numpy as np

# Función del método de Gauss-Seidel
def gauss_seidel(A, b, x0, tol, max_iter):
    n = len(A)
    x = x0.copy()

    for k in range(max_iter):
        x_new = np.copy(x)

        for i in range(n):
            sum_1 = sum(A[i][j] * x_new[j] for j in range(i))
            sum_2 = sum(A[i][j] * x[j] for j in range(i + 1, n))

            x_new[i] = (b[i] - sum_1 - sum_2) / A[i][i]

        # Error relativo
        error = np.linalg.norm(x_new - x, ord=np.inf) / np.linalg.norm(x_new, ord=np.inf)

        # Verificar si el error es menor que la tolerancia
        if error < tol:
            print(f"Convergió en la iteración {k+1}")
            return x_new

        x = x_new

    print("No convergió en el número máximo de iteraciones")
    return x

# Ejemplo de uso
A = np.array([[4.0, -1.0, 0.0],
              [-1.0, 4.0, -1.0],
              [0.0, -1.0, 3.0]])

b = np.array([15.0, 10.0, 10.0])
x0 = np.zeros(len(b))  # Vector inicial de ceros
tol = 1e-5  # Tolerancia para el error
max_iter = 100  # Número máximo de iteraciones

solucion = gauss_seidel(A, b, x0, tol, max_iter)
print("Solución:", solucion)